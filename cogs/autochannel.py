import datetime
from typing import Dict, Union

import nextcord
from discord import PermissionOverwrite
from nextcord.ext import commands, tasks

from internal_tools.configuration import CONFIG
from internal_tools.discord import *


class OpenVoiceChannel:
    """
    Wrapper class for handling permissions and functionality of autogenerated Voicechannels.
    """

    def __init__(
        self,
        owner: Union[nextcord.Member, nextcord.User],
        voice_channel: nextcord.VoiceChannel,
    ):
        self.owner: Union[nextcord.Member, nextcord.User] = owner
        self.voice_channel: nextcord.VoiceChannel = voice_channel

    def is_owner(self, user: Union[nextcord.User, nextcord.Member]):
        return user.id == self.owner.id

    async def set_userlimit(self, x: int):
        self.voice_channel = await self.voice_channel.edit(user_limit=x)  # type: ignore

    async def set_hide(self, hide: bool):
        await self.voice_channel.set_permissions(
            self.voice_channel.guild.default_role, view_channel=not hide
        )

    async def set_public(self, public: bool):
        await self.voice_channel.set_permissions(
            self.voice_channel.guild.default_role,
            connect=public,
            send_messages=public,
            add_reactions=public,
        )

    async def set_name(self, name: str):
        self.voice_channel = await self.voice_channel.edit(name=name)  # type: ignore

    async def transfer_ownership(self, user: nextcord.Member):
        await self.invite_user(user, True)

        self.owner = user

    async def invite_user(self, user: nextcord.Member, invite: bool):
        if invite:
            needed_permissions = True
        else:
            needed_permissions = None

        await self.voice_channel.set_permissions(
            user,
            overwrite=PermissionOverwrite(
                view_channel=needed_permissions,
                connect=needed_permissions,
                send_messages=needed_permissions,
                add_reactions=needed_permissions,
            ),
        )

    async def ban_user(self, user: nextcord.Member, banned: bool):
        if banned:
            needed_permissions = False
        else:
            needed_permissions = None

        await self.voice_channel.set_permissions(
            user,
            overwrite=PermissionOverwrite(
                view_channel=needed_permissions,
                connect=needed_permissions,
                send_messages=needed_permissions,
                add_reactions=needed_permissions,
            ),
        )

    async def delete(self):
        try:
            await self.voice_channel.delete()
        except:
            pass


class AutoChannel(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.open_channels: Dict[int, OpenVoiceChannel] = {}
        self.channels_to_delete: Dict[OpenVoiceChannel, datetime.datetime] = {}

        self.delete_old_channels.start()

    @tasks.loop(seconds=30)
    async def delete_old_channels(self):
        """
        Delete all channels that are sheduled for deletion after their time limit expired.
        """
        copy = self.channels_to_delete.copy()
        for open_channel, time in copy.items():
            if time < datetime.datetime.now():
                await open_channel.delete()
                del self.channels_to_delete[open_channel]
                del self.open_channels[open_channel.voice_channel.id]

    async def cog_application_command_check(self, interaction: nextcord.Interaction):
        """
        You need to be connected to a voicechannel you own, and use the Autochannel commands in the text chat of that Voicechannel.
        """
        if interaction.guild_id not in CONFIG["AUTOCHANNEL"]["GUILD_CONFIGS"]:
            return False

        if isinstance(interaction.user, nextcord.Member):
            if interaction.user.voice:
                if interaction.user.voice.channel:
                    if interaction.channel == interaction.user.voice.channel:
                        user_role_ids = [r.id for r in interaction.user.roles]
                        for admin_role_id in CONFIG["AUTOCHANNEL"]["GUILD_CONFIGS"][
                            interaction.guild_id
                        ]["ADMIN_ROLE_IDS"]:
                            if admin_role_id in user_role_ids:
                                return True

                        if interaction.user.voice.channel.id in self.open_channels:
                            return self.open_channels[
                                interaction.user.voice.channel.id
                            ].is_owner(interaction.user)

        return False

    @commands.Cog.listener()
    async def on_ready(self):
        for guild_id in CONFIG["AUTOCHANNEL"]["GUILD_CONFIGS"]:
            create_channel = await GetOrFetch.channel(
                self.bot,
                CONFIG["AUTOCHANNEL"]["GUILD_CONFIGS"][guild_id][
                    "CREATE_VOICECHANNEL_ID"
                ],
            )
            if isinstance(create_channel, nextcord.VoiceChannel):
                if create_channel.category:
                    for sub_channel in create_channel.category.voice_channels:
                        if (
                            sub_channel.id
                            == CONFIG["AUTOCHANNEL"]["GUILD_CONFIGS"][guild_id][
                                "CREATE_VOICECHANNEL_ID"
                            ]
                        ):
                            continue

                        await sub_channel.delete()

    @commands.Cog.listener()
    async def on_voice_state_update(
        self,
        member: nextcord.Member,
        before: nextcord.VoiceState,
        after: nextcord.VoiceState,
    ):
        # If guild was setup
        if member.guild.id in CONFIG["AUTOCHANNEL"]["GUILD_CONFIGS"]:
            # If user left a voicechannel, and that channel is a open channel and nobody is in there anymore -> Shedule for deletion
            if before.channel:
                if before.channel.id in self.open_channels:
                    if len(before.channel.members) == 0:
                        time = datetime.datetime.now() + datetime.timedelta(
                            minutes=CONFIG["AUTOCHANNEL"][
                                "DELETE_EMPTY_CHANNELS_AFTER_X_MINS"
                            ]
                        )
                        self.channels_to_delete[
                            self.open_channels[before.channel.id]
                        ] = time

            # If user joined a voicechannel
            if after.channel:
                # If that channel is the create channel, make a new channel and move user to it
                if (
                    after.channel.id
                    == CONFIG["AUTOCHANNEL"]["GUILD_CONFIGS"][after.channel.guild.id][
                        "CREATE_VOICECHANNEL_ID"
                    ]
                ):
                    voice_channel = await after.channel.guild.create_voice_channel(
                        member.display_name, category=after.channel.category
                    )
                    self.open_channels[voice_channel.id] = OpenVoiceChannel(
                        member, voice_channel
                    )
                    await self.open_channels[voice_channel.id].invite_user(member, True)
                    await member.move_to(voice_channel)

                # If that channel is a open channel and sheduled for deletion, cancel deletion
                if after.channel.id in self.open_channels:
                    open_channel = self.open_channels[after.channel.id]
                    if open_channel in self.channels_to_delete:
                        del self.channels_to_delete[open_channel]

    @nextcord.slash_command("autochannel")
    async def top_command(self, interaction: nextcord.Interaction):
        ...

    @top_command.subcommand(
        "rename",
        description="Sets a name for the voicechannel you are in.",
    )
    async def set_name(self, interaction: nextcord.Interaction, name: str):
        open_channel = self.open_channels[interaction.user.voice.channel.id]  # type: ignore
        await open_channel.set_name(name)

        await interaction.send(f"Changed the name to '{name}'.")

    @top_command.subcommand(
        "userlimit",
        description="Sets a userlimit for the voicechannel you are in.",
    )
    async def set_userlimit(self, interaction: nextcord.Interaction, limit: int):
        if limit >= 1 and limit <= 99:
            open_channel = self.open_channels[interaction.user.voice.channel.id]  # type: ignore
            await open_channel.set_userlimit(limit)

            await interaction.send(f"Changed the userlimit to {limit}.")
        else:
            await interaction.send(
                "Limit needs to be between 1 and 99.", ephemeral=True
            )

    @top_command.subcommand(
        "public",
        description="Sets the voicechannel you are in to be public.",
    )
    async def set_public(self, interaction: nextcord.Interaction):
        open_channel = self.open_channels[interaction.user.voice.channel.id]  # type: ignore
        await open_channel.set_public(True)

        await interaction.send("Channel is now public.")

    @top_command.subcommand(
        "private",
        description="Sets the voicechannel you are in to be private.",
    )
    async def set_private(self, interaction: nextcord.Interaction):
        open_channel = self.open_channels[interaction.user.voice.channel.id]  # type: ignore
        await open_channel.set_public(False)

        await interaction.send("Channel is now private.")

    @top_command.subcommand(
        "hide",
        description="Hides the voicechannel you are in from other users.",
    )
    async def set_hide(self, interaction: nextcord.Interaction):
        open_channel = self.open_channels[interaction.user.voice.channel.id]  # type: ignore
        await open_channel.set_hide(True)

        await interaction.send("Channel is now hidden.")

    @top_command.subcommand(
        "show",
        description="Shows the voicechannel you are in right now to other users.",
    )
    async def set_show(self, interaction: nextcord.Interaction):
        open_channel = self.open_channels[interaction.user.voice.channel.id]  # type: ignore
        await open_channel.set_hide(False)

        await interaction.send("Channel is now shown.")

    @top_command.subcommand(
        "transfer",
        description="Transfers the voicechannel you are in to another user.",
    )
    async def transfer_channel(
        self, interaction: nextcord.Interaction, user: nextcord.Member
    ):
        open_channel = self.open_channels[interaction.user.voice.channel.id]  # type: ignore
        await open_channel.transfer_ownership(user)

        await interaction.send(
            f"{user.mention} is now owner of {open_channel.voice_channel.mention}."
        )

    @top_command.subcommand(
        "invite",
        description="Invite a user to the voicechannel you are in.",
    )
    async def invite_user(
        self,
        interaction: nextcord.Interaction,
        user: nextcord.Member,
    ):
        open_channel = self.open_channels[interaction.user.voice.channel.id]  # type: ignore
        await open_channel.invite_user(user, True)

        await interaction.send(
            f"{user.mention} was invited to {open_channel.voice_channel.mention}"
        )

    @top_command.subcommand(
        "uninvite",
        description="Invite/removes a user from the voicechannel you are in.",
    )
    async def uninvite_user(
        self,
        interaction: nextcord.Interaction,
        user: nextcord.Member,
    ):
        open_channel = self.open_channels[interaction.user.voice.channel.id]  # type: ignore

        if open_channel.is_owner(user):
            await interaction.send(f"{user.mention} you cant uninvite yourself.")
            return

        await open_channel.invite_user(user, False)

        await interaction.send(
            f"{user.mention} was uninvited from {open_channel.voice_channel.mention}"
        )

    @top_command.subcommand(
        "ban",
        description="Ban a user from the voicechannel you are in.",
    )
    async def ban_user(
        self,
        interaction: nextcord.Interaction,
        user: nextcord.Member,
    ):
        open_channel = self.open_channels[interaction.user.voice.channel.id]  # type: ignore

        if open_channel.is_owner(user):
            await interaction.send(f"{user.mention} you cant ban yourself.")
            return

        await open_channel.ban_user(user, True)

        await interaction.send(
            f"{user.mention} was banned from {open_channel.voice_channel.mention}"
        )

    @top_command.subcommand(
        "unban",
        description="Unban a user from the voicechannel you are in.",
    )
    async def unban_user(
        self,
        interaction: nextcord.Interaction,
        user: nextcord.Member,
    ):
        open_channel = self.open_channels[interaction.user.voice.channel.id]  # type: ignore
        await open_channel.ban_user(user, False)

        await interaction.send(
            f"{user.mention} was unbaned from {open_channel.voice_channel.mention}"
        )

    @top_command.subcommand("kick", description="Kicks a user from the voicechannel.")
    async def kick_user(
        self,
        interaction: nextcord.Interaction,
        user: nextcord.Member,
    ):
        if user.voice:
            if user.voice.channel:
                if user.voice.channel.id == interaction.user.voice.channel.id:  # type: ignore
                    await user.move_to(None)
                    await interaction.send(
                        f"{user.mention} was kicked from {interaction.user.voice.channel.mention}",  # type: ignore
                    )
                    return

        await interaction.send(
            f"{user.mention} is not connected to {interaction.user.voice.channel.mention}",  # type: ignore
            ephemeral=True,
        )

    @top_command.subcommand("delete", description="Deletes the Voicechannel.")
    async def delete_channel(self, interaction: nextcord.Interaction):
        open_channel = self.open_channels[interaction.user.voice.channel.id]  # type: ignore
        await open_channel.delete()

        await interaction.response.pong()


async def setup(bot):
    bot.add_cog(AutoChannel(bot))
